# GitHub Actions workflow dla Pull Request√≥w
# Wykonuje linting, testy jednostkowe i E2E r√≥wnolegle
name: Pull Request Checks

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]
  workflow_dispatch:
    inputs:
      environment:
        description: '≈örodowisko do test√≥w'
        required: true
        default: 'integration'
        type: choice
        options:
        - integration
        - staging
      debug_enabled:
        description: 'W≈ÇƒÖcz tryb debug'
        required: false
        type: boolean
        default: false

# Zapobieganie r√≥wnoleg≈Çemu uruchamianiu workflow dla tego samego PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Uprawnienia potrzebne do komentowania PR i dostƒôpu do repozytorium
permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  NODE_VERSION: '20'
  PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: '1'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint

  parallel-tests:
    needs: [lint]
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test-type: [unit, e2e]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci

      # Kroki specyficzne dla test√≥w jednostkowych
      - name: Run unit tests with coverage
        if: matrix.test-type == 'unit'
        run: npm run test:coverage
        
      - name: Upload unit test coverage
        if: matrix.test-type == 'unit' && always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage
          path: coverage/
          if-no-files-found: warn

      # Kroki specyficzne dla test√≥w E2E
      - name: Install Playwright browsers
        if: matrix.test-type == 'e2e'
        run: npx playwright install chromium
        
      - name: Run E2E tests
        if: matrix.test-type == 'e2e'
        env:
          PUBLIC_SUPABASE_URL: ${{ secrets.PUBLIC_SUPABASE_URL }}
          PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          DEBUG: ${{ github.event.inputs.debug_enabled == 'true' && 'pw:api' || '' }}
        run: npm run test:e2e
        
      - name: Upload E2E test results
        if: matrix.test-type == 'e2e' && always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          if-no-files-found: warn

  status-comment:
    name: Update PR Status
    if: always() && github.event_name == 'pull_request'
    needs: [parallel-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Create Status Comment
        uses: actions/github-script@v7
        with:
          script: |
            const testResult = '${{ needs.parallel-tests.result }}';
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            
            console.log('Context:', {
              owner,
              repo,
              issue_number,
              testResult,
              eventName: context.eventName
            });
            
            let status = '## üîç Pull Request Check Results\n\n';
            
            if (testResult === 'success') {
              status += '‚úÖ Wszystkie testy przesz≈Çy pomy≈õlnie!\n\n';
            } else {
              status += '‚ùå Wykryto problemy:\n';
              if (testResult !== 'success') {
                status += '- Nie wszystkie testy zako≈Ñczy≈Çy siƒô sukcesem\n';
              }
            }
            
            // Dodaj linki do artefakt√≥w
            status += '\n### üìä Raporty\n';
            
            try {
              const artifacts = await github.rest.actions.listArtifactsForRepo({
                owner,
                repo
              });
              
              if (artifacts.data.artifacts.length > 0) {
                status += '- [Raport pokrycia test√≥w jednostkowych](../artifacts/unit-test-coverage)\n';
                status += '- [Raport test√≥w E2E](../artifacts/playwright-report)\n';
              } else {
                status += '_Brak dostƒôpnych raport√≥w_\n';
              }
            } catch (error) {
              console.error('Error checking artifacts:', error);
              status += '_B≈ÇƒÖd podczas sprawdzania raport√≥w_\n';
            }
            
            try {
              await github.rest.issues.createComment({
                issue_number,
                owner,
                repo,
                body: status
              });
              console.log('Successfully posted comment');
            } catch (error) {
              console.error('Error posting comment:', error);
              core.setFailed(`Failed to post comment: ${error.message}`);
            } 