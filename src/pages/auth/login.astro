---
import MainLayout from '../../layouts/MainLayout.astro';
import { ViewTransitions } from 'astro:transitions';
import { SignInForm } from '../../components/auth/SignInForm';

const isLogout = Astro.url.searchParams.has('logout');
const sessionExpired = Astro.url.searchParams.has('session_expired');
const redirectTo = Astro.url.searchParams.get('redirect_to') || '/flashcards';
---

<MainLayout title="Logowanie">
  <ViewTransitions />
  <div class="container mx-auto px-4 py-8">
    <div class="max-w-md mx-auto" data-testid="login-page-container">
      {sessionExpired && (
        <div class="mb-4 p-4 bg-amber-50 text-amber-700 rounded-md border border-amber-200">
          <p>Twoja sesja wygasła lub konto nie istnieje. Zaloguj się ponownie.</p>
          <button
            id="clear-cookies-btn"
            class="mt-2 px-3 py-1 text-sm bg-amber-100 hover:bg-amber-200 text-amber-800 rounded-md"
          >
            Wyczyść dane sesji ręcznie
          </button>
        </div>
      )}
      <div class="w-full max-w-md mx-auto">
        <div class="text-2xl font-bold text-center mb-8">Logowanie</div>
        <div class="min-h-[300px]" data-testid="login-form-container">
          <div id="loading-spinner" class="flex justify-center items-center min-h-[200px]">
            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
          </div>
          <div id="login-form" class="hidden">
            <SignInForm client:only="react" redirectTo={redirectTo} />
          </div>
        </div>
        <div class="mt-4 text-center">
          <a href="/auth/signup" class="text-blue-600 hover:underline" data-testid="switch-to-register">
            Nie masz konta? Zarejestruj się
          </a>
        </div>
      </div>
    </div>
  </div>
</MainLayout>

<script>
  // Obsługa przycisku czyszczenia ciasteczek
  document.getElementById('clear-cookies-btn')?.addEventListener('click', () => {
    // Wyczyść localStorage
    window.localStorage.clear();
    
    // Wyczyść wszystkie ciasteczka
    document.cookie.split(';').forEach(cookie => {
      document.cookie = cookie
        .replace(/^ +/, '')
        .replace(/=.*/, `=;expires=${new Date(0).toUTCString()};path=/`);
    });
    
    window.location.reload();
  });

  // Pokaż formularz i ukryj spinner gdy React jest gotowy
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.addedNodes.length > 0) {
        const loginForm = document.getElementById('login-form');
        const spinner = document.getElementById('loading-spinner');
        if (loginForm?.querySelector('form')) {
          loginForm.classList.remove('hidden');
          spinner?.classList.add('hidden');
          observer.disconnect();
        }
      }
    });
  });

  observer.observe(document.getElementById('login-form') || document.body, {
    childList: true,
    subtree: true
  });

  // Timeout zabezpieczający - pokaż formularz po 2 sekundach nawet jeśli nie wykryto zmian
  setTimeout(() => {
    const loginForm = document.getElementById('login-form');
    const spinner = document.getElementById('loading-spinner');
    loginForm?.classList.remove('hidden');
    spinner?.classList.add('hidden');
    observer.disconnect();
  }, 2000);
</script> 