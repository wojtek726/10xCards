---
import MainLayout from '../../layouts/MainLayout.astro';
import SignInForm from '../../components/auth/SignInForm';
import { ViewTransitions } from 'astro:transitions';
import { logger } from '../../lib/services/logger.service';

// Redirect if user is already logged in
const { user, supabase } = Astro.locals;

// Sprawdzamy, czy to jest przekierowanie po wylogowaniu
const isLogout = Astro.url.searchParams.has('logout');

// Jeśli to jest wylogowanie, czyścimy wszystkie ciasteczka
if (isLogout) {
  const cookiesToDelete = [
    'sb-access-token',
    'sb-refresh-token',
    'supabase-auth-token',
    'session',
    'supabase-auth-token-name',
    'sb-127-auth-token',
    'sb-localhost-auth-token'
  ];
  
  cookiesToDelete.forEach(name => {
    Astro.cookies.delete(name, { path: '/' });
  });
}

// Dodajemy sprawdzanie ciasteczek bezpośrednio
const accessToken = Astro.cookies.get('sb-access-token');
const refreshToken = Astro.cookies.get('sb-refresh-token');
const supabaseAuthToken = Astro.cookies.get('supabase-auth-token');

logger.debug('Login page loaded, checking cookies:');
logger.debug('- Has user in locals:', !!user);
logger.debug('- Has access token cookie:', !!accessToken);
logger.debug('- Has refresh token cookie:', !!refreshToken);
logger.debug('- Has supabase auth token cookie:', !!supabaseAuthToken);
logger.debug('- All cookies:', Astro.request.headers.get('cookie'));

// Jeśli mamy tokeny, sprawdźmy czy sesja jest ważna
if (accessToken && refreshToken && supabase && !isLogout) {
  try {
    const { data, error } = await supabase.auth.getUser();
    logger.debug('Supabase getUser result:', { hasUser: !!data.user, error });
    
    if (data.user) {
      logger.debug('Valid user detected, redirecting to /flashcards');
      return Astro.redirect('/flashcards');
    }
  } catch (err) {
    logger.error('Error checking user session:', err);
  }
}

// Sprawdzamy podstawowo czy użytkownik jest zalogowany (z middleware)
if (user && !isLogout) {
  logger.debug('User in locals, redirecting to /flashcards');
  return Astro.redirect('/flashcards');
}
---

<MainLayout title="Logowanie">
  <ViewTransitions />
  <div class="container mx-auto px-4 py-8">
    <div class="max-w-md mx-auto">
      <SignInForm client:load />
      <div class="mt-4 text-center">
        <a href="/auth/signup" class="text-blue-600 hover:underline">Nie masz konta? Zarejestruj się</a>
      </div>
    </div>
  </div>
</MainLayout>

<script>
  import { logger } from '../../lib/services/logger.service';

  // Funkcja pomocnicza do czyszczenia ciasteczek po stronie klienta
  function deleteAllCookies() {
    const cookies = document.cookie.split(";");
    
    for (let i = 0; i < cookies.length; i++) {
      const cookie = cookies[i];
      const eqPos = cookie.indexOf("=");
      const name = eqPos > -1 ? cookie.substring(0, eqPos).trim() : cookie.trim();
      
      // Usuwamy każde ciasteczko ustawiając datę wygaśnięcia w przeszłości
      document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/`;
      document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/;secure`;
      document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/;domain=${window.location.hostname}`;
    }
  }

  // Sprawdź, czy strona została załadowana po wylogowaniu
  if (window.location.search.includes('logout')) {
    logger.debug('Logout detected, clearing all cookies client-side');
    deleteAllCookies();
    // Usuń parametr logout z URL bez odświeżania strony
    window.history.replaceState({}, document.title, window.location.pathname);
  }
</script>
